/* การตั้งค่าพื้นฐาน */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5; /* สีพื้นหลัง */
}

/* ส่วนของแอป */
.App {
  font-family: Arial, sans-serif;
  margin: 20px auto;
  max-width: 800px;
  padding: 20px;
}

/* ส่วนหัวข้อ */
.header {
  text-align: center;
  color: #007acc;
  font-size: 24px;
  margin-bottom: 20px;
}

/* การจัดการช่องค้นหา */
.search-container {
  display: flex;
  flex-direction: column; /* จัดให้อยู่ในแนวตั้ง */
  align-items: center; /* จัดให้อยู่ตรงกลาง */
  gap: 10px; /* เพิ่มช่องว่างระหว่าง Input และปุ่ม */
  margin-bottom: 20px;
}

.search-input {
  padding: 10px;
  font-size: 16px;
  width: 100%;
  max-width: 400px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* ปุ่มค้นหา */
.search-button {
  padding: 10px 20px;
  background-color: #007acc;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  margin-bottom: 10px;
  cursor: pointer;
}

.search-button:hover {
  background-color: #0056b3;
}

/* การจัดการผลลัพธ์ */
.results-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

/* การจัดการผลลัพธ์แต่ละรายการ */
.result-item {
  display: flex;
  gap: 15px;
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 15px;
}

/* รูปภาพในผลลัพธ์ */
.result-image {
  flex: 0 0 auto; /* ให้ .result-image ใช้พื้นที่ตามขนาดเนื้อหา */
  cursor: pointer;
}

.result-image img {
  width: auto; /* ความกว้าง auto อิงจากความสูง */
  height: 200px; /* ความสูงให้ครอบคลุม */
  object-fit: cover; /* ปรับรูปภาพให้ครอบคลุมพื้นที่ */
  border-radius: 25px;
  object-fit: cover;
  transition: transform 0.3s ease;  
}

.result-image:hover img {
  transform: scale(1.05); /* เพิ่มเอฟเฟกต์ขยายเมื่อ Hover */
}

.result-photos {
  display: flex; /* ใช้ Flexbox สำหรับจัดรูปภาพ */
  justify-content: flex-start; /* จัดระยะชิดซ้าย */
  gap: 10px; /* เพิ่มช่องไฟระหว่างรูปภาพ */
  margin-top: 10px; /* เพิ่มระยะห่างจาก .result-tags */
}

.result-photos .photo {
  width: 80px; /* ความกว้างของรูปภาพ */
  height: 60px; /* ความสูงของรูปภาพ */
  object-fit: cover; /* ให้รูปภาพครอบพื้นที่ */
  border-radius: 5px; /* เพิ่มขอบมน */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* เพิ่มเงา */
  transition: transform 0.3s ease; 
}

.result-photos .photo:hover {
  transform: scale(1.05); /* ขยายเมื่อชี้เมาส์ */
}

.copy-url {
  margin-left: auto; /* ดันให้ไอคอนไปชิดขวา */
  margin-top: auto; /* ดันให้ไอคอนไปชิดล่าง */
  cursor: pointer;
}

.copy-url img {
  width: 24px; /* ขนาดของไอคอน */
  height: 24px;
  transition: transform 0.2s ease;
}

.copy-url img:hover {
  transform: scale(1.2); /* ขยายเมื่อชี้เมาส์ */
}

/* รายละเอียดในผลลัพธ์ */
.result-details {
  flex: 1;
}

.result-title {
  color: #007acc;
  margin: 0 0 10px;
  text-decoration: none;
}

.result-title:hover {
  text-decoration: underline;
}

.result-description {
  color: #555;
  margin: 0 0 10px;
}

.result-tags {
  display: flex;
  gap: 5px;
  flex-wrap: wrap;
}

.tag {
  background-color: #f0f0f0;
  color: #007acc;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 5px 10px;
  font-size: 12px;
  cursor: pointer;
}

.tag:hover {
  background-color: #e0e0e0;
}


การปรับปรุงโค้ดเพื่อแสดงจำนวนผลลัพธ์ที่พบจากการค้นหา
ในกรณีนี้ เราจะเพิ่มข้อความใต้ปุ่ม "ค้นหา" เพื่อแจ้งผู้ใช้ว่ามีรายการสถานที่เที่ยวที่ค้นพบกี่รายการ โดยการปรับปรุงจะต่อยอดจากโค้ดที่ให้มา

App.jsx
javascript
Copy code
// Import libraries ที่จำเป็น
import React, { useState } from "react";
import axios from "axios"; // ใช้สำหรับการส่ง HTTP Request
import "./App.css"; // Import ไฟล์ CSS
import SearchInput from "./components/SearchInput";
import ResultItem from "./components/ResultItem";

function App() {
  const [searchQuery, setSearchQuery] = useState(""); // เก็บคำค้นหา
  const [trips, setTrips] = useState([]); // เก็บผลลัพธ์การค้นหา
  const [error, setError] = useState(""); // เก็บข้อความ Error
  const [hasSearched, setHasSearched] = useState(false); // ตรวจสอบว่ามีการค้นหาหรือไม่

  // ฟังก์ชันจัดการเมื่อผู้ใช้พิมพ์คำค้นหาในช่อง Input
  function handleSearchChange(event) {
    const query = event.target.value; // ดึงค่าจาก Input
    setSearchQuery(query); // อัปเดต State
  }

  // ฟังก์ชันสำหรับค้นหาสถานที่ท่องเที่ยวผ่าน API
  function fetchTrips() {
    if (searchQuery.trim() === "") {
      setError("กรุณาใส่คำที่ต้องการค้นหา");
      setTrips([]); // ล้างผลลัพธ์การค้นหาเดิม
      setHasSearched(false); // ยังไม่ได้เริ่มค้นหาอย่างถูกต้อง
      return;
    }

    axios
      .get(`http://localhost:4001/trips?keywords=${searchQuery}`) // เรียกใช้ API พร้อมส่งคำค้นหา
      .then(function (response) {
        setTrips(response.data.data); // อัปเดตข้อมูลสถานที่
        setError(""); // ล้างข้อความ Error
        setHasSearched(true); // บันทึกว่ามีการค้นหาแล้ว
      })
      .catch(function () {
        setError("เกิดข้อผิดพลาด ไม่สามารถดึงข้อมูลได้");
        setHasSearched(true); // บันทึกว่ามีการค้นหาแล้ว
      });
  }

  // ฟังก์ชันที่ส่งให้ Tags เพื่อให้สามารถค้นหาอัตโนมัติได้
  function handleTagClick(tag) {
    setSearchQuery(tag); // อัปเดตคำค้นหาเป็นชื่อ Tag
    setTimeout(function () {
      fetchTrips(); // เรียกใช้การค้นหา
    }, 0); // รอจน `searchQuery` ถูกอัปเดต
  }

  return (
    <div className="App">
      {/* Header */}
      <h1 className="header">เที่ยวไหนดี</h1>

      {/* ช่องค้นหา */}
      <div className="search-container">
        <SearchInput
          searchQuery={searchQuery}
          handleSearch={handleSearchChange}
          onSearch={fetchTrips} // รองรับการกด Enter
        />
        <button onClick={fetchTrips} className="search-button">
          ค้นหา
        </button>

        {/* แสดงจำนวนผลลัพธ์ที่ค้นพบ */}
        {hasSearched && (
          <p className="result-count">
            สถานที่เที่ยวจากคำที่คุณค้นหามี {trips.length} รายการ
          </p>
        )}
      </div>

      {/* แสดงข้อความ Error */}
      {error && <p className="error-message">{error}</p>}

      {/* แสดงผลลัพธ์ */}
      <div className="results-container">
        {hasSearched && trips.length === 0 ? (
          <p className="no-results">ไม่พบข้อมูล</p>
        ) : (
          trips.map(function (trip) {
            return (
              <ResultItem
                key={trip.eid}
                place={trip}
                handleTagClick={handleTagClick} // ส่งฟังก์ชัน handleTagClick
              />
            );
          })
        )}
      </div>
    </div>
  );
}

export default App;
App.css
เพิ่มการออกแบบข้อความแจ้งจำนวนผลลัพธ์ (result-count) ในไฟล์ CSS:

css
Copy code
/* ข้อความแจ้งจำนวนผลลัพธ์ */
.result-count {
  margin-top: 10px;
  font-size: 16px;
  color: #555; /* สีเทาเข้ม */
  text-align: center;
}

/* ข้อความ Error */
.error-message {
  text-align: center;
  color: #ff6b6b;
  margin-top: 20px;
}

/* การตั้งค่า Animation สำหรับ Loading */
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-top: 20px;
}

.loading-spinner {
  width: 50px;
  height: 50px;
  border: 5px solid #f3f3f3; /* สีพื้นหลัง */
  border-top: 5px solid #007acc; /* สีหลัก */
  border-radius: 50%;
  animation: spin 1s linear infinite; /* สร้างการหมุน */
  margin-bottom: 10px;
}

/* การสร้าง Keyframes สำหรับการหมุน */
@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* ข้อความแจ้ง Loading */
.loading-container p {
  font-size: 16px;
  color: #007acc;
  margin: 0;
}

/* Responsive สำหรับมือถือ */
@media (max-width: 660px) {
  .result-item {
    flex-direction: column;
    text-align: center;
  }

  .result-image img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
  }

  .result-details {
    text-align: center;
  }

  .result-photos {
    display: flex;
    justify-content: center;
    flex-wrap: wrap; /* ให้รูปภาพสามารถไหลไปยังบรรทัดถัดไป */
    gap: 10px; /* ระยะห่างระหว่างรูป */
  }

  .result-photos .photo {
    width: 70px;
    height: 50px;
  }
}

@media (max-width: 400px) {
  .result-item {
    padding: 10px;
  }

  .result-title {
    font-size: 16px;
  }

  .result-photos .photo {
    width: 60px;
    height: 45px;
  }
}
